// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "yawarad": cluster-snapshots Resource Client
//
// Command:
// $ goagen
// --design=github.com/itamartempel/yawarad/design
// --out=$(GOPATH)/src/github.com/itamartempel/yawarad
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListClusterSnapshotsPath computes a request path to the list action of cluster-snapshots.
func ListClusterSnapshotsPath(clusterName string) string {
	param0 := clusterName

	return fmt.Sprintf("/api/v1/cluster-branching/clusters/%s/snapshots", param0)
}

// Retrive snapshots of a specific cluster
func (c *Client) ListClusterSnapshots(ctx context.Context, path string, fromTime *int, limit *int, skip *int, toTime *int) (*http.Response, error) {
	req, err := c.NewListClusterSnapshotsRequest(ctx, path, fromTime, limit, skip, toTime)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListClusterSnapshotsRequest create the request corresponding to the list action endpoint of the cluster-snapshots resource.
func (c *Client) NewListClusterSnapshotsRequest(ctx context.Context, path string, fromTime *int, limit *int, skip *int, toTime *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if fromTime != nil {
		tmp29 := strconv.Itoa(*fromTime)
		values.Set("from_time", tmp29)
	}
	if limit != nil {
		tmp30 := strconv.Itoa(*limit)
		values.Set("limit", tmp30)
	}
	if skip != nil {
		tmp31 := strconv.Itoa(*skip)
		values.Set("skip", tmp31)
	}
	if toTime != nil {
		tmp32 := strconv.Itoa(*toTime)
		values.Set("to_time", tmp32)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
