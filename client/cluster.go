// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "yawarad": cluster Resource Client
//
// Command:
// $ goagen
// --design=github.com/itamartempel/yawarad/design
// --out=$(GOPATH)/src/github.com/itamartempel/yawarad
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListClusterPath computes a request path to the list action of cluster.
func ListClusterPath() string {

	return fmt.Sprintf("/api/v1/cluster-branching/clusters/")
}

// Retrieve all Available cluster that can be branch.
func (c *Client) ListCluster(ctx context.Context, path string, clusterName *string, clusterType *string, limit *int, skip *int) (*http.Response, error) {
	req, err := c.NewListClusterRequest(ctx, path, clusterName, clusterType, limit, skip)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListClusterRequest create the request corresponding to the list action endpoint of the cluster resource.
func (c *Client) NewListClusterRequest(ctx context.Context, path string, clusterName *string, clusterType *string, limit *int, skip *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if clusterName != nil {
		values.Set("cluster_name", *clusterName)
	}
	if clusterType != nil {
		values.Set("cluster_type", *clusterType)
	}
	if limit != nil {
		tmp23 := strconv.Itoa(*limit)
		values.Set("limit", tmp23)
	}
	if skip != nil {
		tmp24 := strconv.Itoa(*skip)
		values.Set("skip", tmp24)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowClusterPath computes a request path to the show action of cluster.
func ShowClusterPath(clusterName string) string {
	param0 := clusterName

	return fmt.Sprintf("/api/v1/cluster-branching/clusters/%s", param0)
}

// Retrieve single cluster to be branch by name.
func (c *Client) ShowCluster(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowClusterRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowClusterRequest create the request corresponding to the show action endpoint of the cluster resource.
func (c *Client) NewShowClusterRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
