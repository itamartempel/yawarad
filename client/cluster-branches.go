// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "yawarad": cluster-branches Resource Client
//
// Command:
// $ goagen
// --design=github.com/itamartempel/yawarad/design
// --out=$(GOPATH)/src/github.com/itamartempel/yawarad
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// ListClusterBranchesPath computes a request path to the list action of cluster-branches.
func ListClusterBranchesPath(clusterName string) string {
	param0 := clusterName

	return fmt.Sprintf("/api/v1/cluster-branching/clusters/%s/branches", param0)
}

// Retrive branches of a specific cluster
func (c *Client) ListClusterBranches(ctx context.Context, path string, fromTime *int, limit *int, requestor *string, skip *int, status *string, team *string, toTime *int, type_ *string) (*http.Response, error) {
	req, err := c.NewListClusterBranchesRequest(ctx, path, fromTime, limit, requestor, skip, status, team, toTime, type_)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListClusterBranchesRequest create the request corresponding to the list action endpoint of the cluster-branches resource.
func (c *Client) NewListClusterBranchesRequest(ctx context.Context, path string, fromTime *int, limit *int, requestor *string, skip *int, status *string, team *string, toTime *int, type_ *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if fromTime != nil {
		tmp25 := strconv.Itoa(*fromTime)
		values.Set("from_time", tmp25)
	}
	if limit != nil {
		tmp26 := strconv.Itoa(*limit)
		values.Set("limit", tmp26)
	}
	if requestor != nil {
		values.Set("requestor", *requestor)
	}
	if skip != nil {
		tmp27 := strconv.Itoa(*skip)
		values.Set("skip", tmp27)
	}
	if status != nil {
		values.Set("status", *status)
	}
	if team != nil {
		values.Set("team", *team)
	}
	if toTime != nil {
		tmp28 := strconv.Itoa(*toTime)
		values.Set("to_time", tmp28)
	}
	if type_ != nil {
		values.Set("type", *type_)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
