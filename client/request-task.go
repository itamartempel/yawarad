// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "yawarad": request-task Resource Client
//
// Command:
// $ goagen
// --design=github.com/itamartempel/yawarad/design
// --out=$(GOPATH)/src/github.com/itamartempel/yawarad
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"golang.org/x/net/websocket"
	"net/http"
	"net/url"
)

// ListRequestTaskPath computes a request path to the list action of request-task.
func ListRequestTaskPath(requestID string) string {
	param0 := requestID

	return fmt.Sprintf("/api/v1/cluster-branching/requests/%s/tasks", param0)
}

// Retrive request tasks
func (c *Client) ListRequestTask(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListRequestTaskRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListRequestTaskRequest create the request corresponding to the list action endpoint of the request-task resource.
func (c *Client) NewListRequestTaskRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// LogRequestTaskPath computes a request path to the log action of request-task.
func LogRequestTaskPath(requestID string, taskName string) string {
	param0 := requestID
	param1 := taskName

	return fmt.Sprintf("/api/v1/cluster-branching/requests/%s/tasks/%s/log", param0, param1)
}

// Retrive a single request task by id
func (c *Client) LogRequestTask(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewLogRequestTaskRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLogRequestTaskRequest create the request corresponding to the log action endpoint of the request-task resource.
func (c *Client) NewLogRequestTaskRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowRequestTaskPath computes a request path to the show action of request-task.
func ShowRequestTaskPath(requestID string, taskName string) string {
	param0 := requestID
	param1 := taskName

	return fmt.Sprintf("/api/v1/cluster-branching/requests/%s/tasks/%s", param0, param1)
}

// Retrive a single request task by name
func (c *Client) ShowRequestTask(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowRequestTaskRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowRequestTaskRequest create the request corresponding to the show action endpoint of the request-task resource.
func (c *Client) NewShowRequestTaskRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// StreamLogRequestTaskPath computes a request path to the stream-log action of request-task.
func StreamLogRequestTaskPath(requestID string, taskName string) string {
	param0 := requestID
	param1 := taskName

	return fmt.Sprintf("/api/v1/cluster-branching/requests/%s/tasks/%s/log/ws", param0, param1)
}

// Retrive a single request task by id
func (c *Client) StreamLogRequestTask(ctx context.Context, path string) (*websocket.Conn, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "ws"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	url_ := u.String()
	cfg, err := websocket.NewConfig(url_, url_)
	if err != nil {
		return nil, err
	}
	return websocket.DialConfig(cfg)
}
