// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "yawarad": Application User Types
//
// Command:
// $ goagen
// --design=github.com/itamartempel/yawarad/design
// --out=$(GOPATH)/src/github.com/itamartempel/yawarad
// --version=v1.3.1

package client

import (
	"github.com/goadesign/goa"
)

// CreateBranchPayload defind a new branch request
type createBranchPayload struct {
	// Cluster name that the branch will created from
	ClusterName *string `form:"cluster_name,omitempty" json:"cluster_name,omitempty" yaml:"cluster_name,omitempty" xml:"cluster_name,omitempty"`
	// The user that request the branch
	Requestor *string `form:"requestor,omitempty" json:"requestor,omitempty" yaml:"requestor,omitempty" xml:"requestor,omitempty"`
	// Snapshot image id that this branch will create from
	SnapshotID *string `form:"snapshot_id,omitempty" json:"snapshot_id,omitempty" yaml:"snapshot_id,omitempty" xml:"snapshot_id,omitempty"`
	// The Team that this branch will create for
	Team *string `form:"team,omitempty" json:"team,omitempty" yaml:"team,omitempty" xml:"team,omitempty"`
	// The type of this branch
	Type *string `form:"type,omitempty" json:"type,omitempty" yaml:"type,omitempty" xml:"type,omitempty"`
}

// Validate validates the createBranchPayload type instance.
func (ut *createBranchPayload) Validate() (err error) {
	if ut.SnapshotID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "snapshot_id"))
	}
	if ut.Team == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "team"))
	}
	if ut.ClusterName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "cluster_name"))
	}
	if ut.Requestor == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "requestor"))
	}
	if ut.Type == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "type"))
	}
	if ut.Requestor != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Requestor); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.requestor`, *ut.Requestor, goa.FormatEmail, err2))
		}
	}
	if ut.Type != nil {
		if !(*ut.Type == "dev" || *ut.Type == "dr") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`request.type`, *ut.Type, []interface{}{"dev", "dr"}))
		}
	}
	return
}

// Publicize creates CreateBranchPayload from createBranchPayload
func (ut *createBranchPayload) Publicize() *CreateBranchPayload {
	var pub CreateBranchPayload
	if ut.ClusterName != nil {
		pub.ClusterName = *ut.ClusterName
	}
	if ut.Requestor != nil {
		pub.Requestor = *ut.Requestor
	}
	if ut.SnapshotID != nil {
		pub.SnapshotID = *ut.SnapshotID
	}
	if ut.Team != nil {
		pub.Team = *ut.Team
	}
	if ut.Type != nil {
		pub.Type = *ut.Type
	}
	return &pub
}

// CreateBranchPayload defind a new branch request
type CreateBranchPayload struct {
	// Cluster name that the branch will created from
	ClusterName string `form:"cluster_name" json:"cluster_name" yaml:"cluster_name" xml:"cluster_name"`
	// The user that request the branch
	Requestor string `form:"requestor" json:"requestor" yaml:"requestor" xml:"requestor"`
	// Snapshot image id that this branch will create from
	SnapshotID string `form:"snapshot_id" json:"snapshot_id" yaml:"snapshot_id" xml:"snapshot_id"`
	// The Team that this branch will create for
	Team string `form:"team" json:"team" yaml:"team" xml:"team"`
	// The type of this branch
	Type string `form:"type" json:"type" yaml:"type" xml:"type"`
}

// Validate validates the CreateBranchPayload type instance.
func (ut *CreateBranchPayload) Validate() (err error) {
	if ut.SnapshotID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "snapshot_id"))
	}
	if ut.Team == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "team"))
	}
	if ut.ClusterName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "cluster_name"))
	}
	if ut.Requestor == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "requestor"))
	}
	if ut.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "type"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, ut.Requestor); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.requestor`, ut.Requestor, goa.FormatEmail, err2))
	}
	if !(ut.Type == "dev" || ut.Type == "dr") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`type.type`, ut.Type, []interface{}{"dev", "dr"}))
	}
	return
}

// UpdateBranchPayload defind an update request on existing branch
type updateBranchPayload struct {
	// Comment of this operation
	Comment *string `form:"comment,omitempty" json:"comment,omitempty" yaml:"comment,omitempty" xml:"comment,omitempty"`
	// The operation to be done on the existing branch
	Operation *string `form:"operation,omitempty" json:"operation,omitempty" yaml:"operation,omitempty" xml:"operation,omitempty"`
}

// Validate validates the updateBranchPayload type instance.
func (ut *updateBranchPayload) Validate() (err error) {
	if ut.Operation == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "operation"))
	}
	if ut.Operation != nil {
		if !(*ut.Operation == "extend_expiration" || *ut.Operation == "expire_now") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError(`request.operation`, *ut.Operation, []interface{}{"extend_expiration", "expire_now"}))
		}
	}
	return
}

// Publicize creates UpdateBranchPayload from updateBranchPayload
func (ut *updateBranchPayload) Publicize() *UpdateBranchPayload {
	var pub UpdateBranchPayload
	if ut.Comment != nil {
		pub.Comment = ut.Comment
	}
	if ut.Operation != nil {
		pub.Operation = *ut.Operation
	}
	return &pub
}

// UpdateBranchPayload defind an update request on existing branch
type UpdateBranchPayload struct {
	// Comment of this operation
	Comment *string `form:"comment,omitempty" json:"comment,omitempty" yaml:"comment,omitempty" xml:"comment,omitempty"`
	// The operation to be done on the existing branch
	Operation string `form:"operation" json:"operation" yaml:"operation" xml:"operation"`
}

// Validate validates the UpdateBranchPayload type instance.
func (ut *UpdateBranchPayload) Validate() (err error) {
	if ut.Operation == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "operation"))
	}
	if !(ut.Operation == "extend_expiration" || ut.Operation == "expire_now") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError(`type.operation`, ut.Operation, []interface{}{"extend_expiration", "expire_now"}))
	}
	return
}
