// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "yawarad": cluster-branching TestHelpers
//
// Command:
// $ goagen
// --design=github.com/itamartempel/yawarad/design
// --out=$(GOPATH)/src/github.com/itamartempel/yawarad
// --version=v1.3.1

package test

import (
	"bytes"
	"context"
	"fmt"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/goatest"
	"github.com/itamartempel/yawarad/app"
	"io"
	"log"
	"net/http"
	"net/http/httptest"
	"net/url"
	"strconv"
)

// CreateBranchClusterBranchingBadRequest runs the method CreateBranch of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func CreateBranchClusterBranchingBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, payload *app.CreateBranchPayload) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/branches"),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	createBranchCtx, __err := app.NewCreateBranchClusterBranchingContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil
	}
	createBranchCtx.Payload = payload

	// Perform action
	__err = ctrl.CreateBranch(createBranchCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}

	// Return results
	return rw
}

// CreateBranchClusterBranchingCreated runs the method CreateBranch of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func CreateBranchClusterBranchingCreated(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, payload *app.CreateBranchPayload) (http.ResponseWriter, *app.BranchRequest) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil, nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/branches"),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	createBranchCtx, __err := app.NewCreateBranchClusterBranchingContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil, nil
	}
	createBranchCtx.Payload = payload

	// Perform action
	__err = ctrl.CreateBranch(createBranchCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 201 {
		t.Errorf("invalid response status code: got %+v, expected 201", rw.Code)
	}
	var mt *app.BranchRequest
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(*app.BranchRequest)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.BranchRequest", resp, resp)
		}
		__err = mt.Validate()
		if __err != nil {
			t.Errorf("invalid response media type: %s", __err)
		}
	}

	// Return results
	return rw, mt
}

// CreateBranchClusterBranchingUnprocessableEntity runs the method CreateBranch of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func CreateBranchClusterBranchingUnprocessableEntity(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, payload *app.CreateBranchPayload) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/branches"),
	}
	req, _err := http.NewRequest("POST", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	createBranchCtx, __err := app.NewCreateBranchClusterBranchingContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil
	}
	createBranchCtx.Payload = payload

	// Perform action
	__err = ctrl.CreateBranch(createBranchCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 422 {
		t.Errorf("invalid response status code: got %+v, expected 422", rw.Code)
	}

	// Return results
	return rw
}

// ListBranchesClusterBranchingOK runs the method ListBranches of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListBranchesClusterBranchingOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, clusterName *string, fromTime *int, limit int, requestor *string, skip *int, status *string, team *string, toTime *int, type_ *string) (http.ResponseWriter, app.ClusterBranchCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if clusterName != nil {
		sliceVal := []string{*clusterName}
		query["cluster_name"] = sliceVal
	}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		query["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		query["limit"] = sliceVal
	}
	if requestor != nil {
		sliceVal := []string{*requestor}
		query["requestor"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		query["skip"] = sliceVal
	}
	if status != nil {
		sliceVal := []string{*status}
		query["status"] = sliceVal
	}
	if team != nil {
		sliceVal := []string{*team}
		query["team"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		query["to_time"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/v1/cluster-branching/branches"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if clusterName != nil {
		sliceVal := []string{*clusterName}
		prms["cluster_name"] = sliceVal
	}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		prms["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		prms["limit"] = sliceVal
	}
	if requestor != nil {
		sliceVal := []string{*requestor}
		prms["requestor"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		prms["skip"] = sliceVal
	}
	if status != nil {
		sliceVal := []string{*status}
		prms["status"] = sliceVal
	}
	if team != nil {
		sliceVal := []string{*team}
		prms["team"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		prms["to_time"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	listBranchesCtx, _err := app.NewListBranchesClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.ListBranches(listBranchesCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.ClusterBranchCollection
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(app.ClusterBranchCollection)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ClusterBranchCollection", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ListClusterBranchesClusterBranchingNotFound runs the method ListClusterBranches of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListClusterBranchesClusterBranchingNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, clusterName string, fromTime *int, limit int, requestor *string, skip *int, status *string, team *string, toTime *int, type_ *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		query["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		query["limit"] = sliceVal
	}
	if requestor != nil {
		sliceVal := []string{*requestor}
		query["requestor"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		query["skip"] = sliceVal
	}
	if status != nil {
		sliceVal := []string{*status}
		query["status"] = sliceVal
	}
	if team != nil {
		sliceVal := []string{*team}
		query["team"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		query["to_time"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/v1/cluster-branching/clusters/%v/branches", clusterName),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["cluster_name"] = []string{fmt.Sprintf("%v", clusterName)}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		prms["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		prms["limit"] = sliceVal
	}
	if requestor != nil {
		sliceVal := []string{*requestor}
		prms["requestor"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		prms["skip"] = sliceVal
	}
	if status != nil {
		sliceVal := []string{*status}
		prms["status"] = sliceVal
	}
	if team != nil {
		sliceVal := []string{*team}
		prms["team"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		prms["to_time"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	listClusterBranchesCtx, _err := app.NewListClusterBranchesClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.ListClusterBranches(listClusterBranchesCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ListClusterBranchesClusterBranchingOK runs the method ListClusterBranches of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListClusterBranchesClusterBranchingOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, clusterName string, fromTime *int, limit int, requestor *string, skip *int, status *string, team *string, toTime *int, type_ *string) (http.ResponseWriter, app.ClusterBranchCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		query["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		query["limit"] = sliceVal
	}
	if requestor != nil {
		sliceVal := []string{*requestor}
		query["requestor"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		query["skip"] = sliceVal
	}
	if status != nil {
		sliceVal := []string{*status}
		query["status"] = sliceVal
	}
	if team != nil {
		sliceVal := []string{*team}
		query["team"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		query["to_time"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/v1/cluster-branching/clusters/%v/branches", clusterName),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["cluster_name"] = []string{fmt.Sprintf("%v", clusterName)}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		prms["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		prms["limit"] = sliceVal
	}
	if requestor != nil {
		sliceVal := []string{*requestor}
		prms["requestor"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		prms["skip"] = sliceVal
	}
	if status != nil {
		sliceVal := []string{*status}
		prms["status"] = sliceVal
	}
	if team != nil {
		sliceVal := []string{*team}
		prms["team"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		prms["to_time"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	listClusterBranchesCtx, _err := app.NewListClusterBranchesClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.ListClusterBranches(listClusterBranchesCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.ClusterBranchCollection
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(app.ClusterBranchCollection)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ClusterBranchCollection", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ListClusterSnapshotsClusterBranchingNotFound runs the method ListClusterSnapshots of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListClusterSnapshotsClusterBranchingNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, clusterName string, fromTime *int, limit int, skip *int, toTime *int) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		query["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		query["limit"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		query["skip"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		query["to_time"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/v1/cluster-branching/clusters/%v/snapshots", clusterName),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["cluster_name"] = []string{fmt.Sprintf("%v", clusterName)}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		prms["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		prms["limit"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		prms["skip"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		prms["to_time"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	listClusterSnapshotsCtx, _err := app.NewListClusterSnapshotsClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.ListClusterSnapshots(listClusterSnapshotsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ListClusterSnapshotsClusterBranchingOK runs the method ListClusterSnapshots of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListClusterSnapshotsClusterBranchingOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, clusterName string, fromTime *int, limit int, skip *int, toTime *int) (http.ResponseWriter, app.ClusterSnapshotCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		query["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		query["limit"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		query["skip"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		query["to_time"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/v1/cluster-branching/clusters/%v/snapshots", clusterName),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["cluster_name"] = []string{fmt.Sprintf("%v", clusterName)}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		prms["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		prms["limit"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		prms["skip"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		prms["to_time"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	listClusterSnapshotsCtx, _err := app.NewListClusterSnapshotsClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.ListClusterSnapshots(listClusterSnapshotsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.ClusterSnapshotCollection
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(app.ClusterSnapshotCollection)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ClusterSnapshotCollection", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ListClustersClusterBranchingOK runs the method ListClusters of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListClustersClusterBranchingOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, clusterType *string) (http.ResponseWriter, app.ClusterForBranchingCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if clusterType != nil {
		sliceVal := []string{*clusterType}
		query["cluster_type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/v1/cluster-branching/clusters"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if clusterType != nil {
		sliceVal := []string{*clusterType}
		prms["cluster_type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	listClustersCtx, _err := app.NewListClustersClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.ListClusters(listClustersCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.ClusterForBranchingCollection
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(app.ClusterForBranchingCollection)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ClusterForBranchingCollection", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ListRequestTasksClusterBranchingOK runs the method ListRequestTasks of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListRequestTasksClusterBranchingOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, requestID string) (http.ResponseWriter, app.BranchRequestTaskCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/requests/%v/tasks", requestID),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["request_id"] = []string{fmt.Sprintf("%v", requestID)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	listRequestTasksCtx, _err := app.NewListRequestTasksClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.ListRequestTasks(listRequestTasksCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.BranchRequestTaskCollection
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(app.BranchRequestTaskCollection)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.BranchRequestTaskCollection", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ListRequestsClusterBranchingOK runs the method ListRequests of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListRequestsClusterBranchingOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, clusterName *string, fromTime *int, limit int, requestor *string, skip *int, state *string, toTime *int, type_ *string) (http.ResponseWriter, app.BranchRequestCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if clusterName != nil {
		sliceVal := []string{*clusterName}
		query["cluster_name"] = sliceVal
	}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		query["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		query["limit"] = sliceVal
	}
	if requestor != nil {
		sliceVal := []string{*requestor}
		query["requestor"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		query["skip"] = sliceVal
	}
	if state != nil {
		sliceVal := []string{*state}
		query["state"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		query["to_time"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/v1/cluster-branching/requests"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if clusterName != nil {
		sliceVal := []string{*clusterName}
		prms["cluster_name"] = sliceVal
	}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		prms["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		prms["limit"] = sliceVal
	}
	if requestor != nil {
		sliceVal := []string{*requestor}
		prms["requestor"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		prms["skip"] = sliceVal
	}
	if state != nil {
		sliceVal := []string{*state}
		prms["state"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		prms["to_time"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	listRequestsCtx, _err := app.NewListRequestsClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.ListRequests(listRequestsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.BranchRequestCollection
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(app.BranchRequestCollection)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.BranchRequestCollection", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ListSnapshotBranchesClusterBranchingNotFound runs the method ListSnapshotBranches of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListSnapshotBranchesClusterBranchingNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, snapshotID string, fromTime *int, limit int, requestor *string, skip *int, status *string, team *string, toTime *int, type_ *string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		query["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		query["limit"] = sliceVal
	}
	if requestor != nil {
		sliceVal := []string{*requestor}
		query["requestor"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		query["skip"] = sliceVal
	}
	if status != nil {
		sliceVal := []string{*status}
		query["status"] = sliceVal
	}
	if team != nil {
		sliceVal := []string{*team}
		query["team"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		query["to_time"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/v1/cluster-branching/snapshots/%v/branches", snapshotID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["snapshot_id"] = []string{fmt.Sprintf("%v", snapshotID)}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		prms["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		prms["limit"] = sliceVal
	}
	if requestor != nil {
		sliceVal := []string{*requestor}
		prms["requestor"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		prms["skip"] = sliceVal
	}
	if status != nil {
		sliceVal := []string{*status}
		prms["status"] = sliceVal
	}
	if team != nil {
		sliceVal := []string{*team}
		prms["team"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		prms["to_time"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	listSnapshotBranchesCtx, _err := app.NewListSnapshotBranchesClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.ListSnapshotBranches(listSnapshotBranchesCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ListSnapshotBranchesClusterBranchingOK runs the method ListSnapshotBranches of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListSnapshotBranchesClusterBranchingOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, snapshotID string, fromTime *int, limit int, requestor *string, skip *int, status *string, team *string, toTime *int, type_ *string) (http.ResponseWriter, app.ClusterBranchCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		query["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		query["limit"] = sliceVal
	}
	if requestor != nil {
		sliceVal := []string{*requestor}
		query["requestor"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		query["skip"] = sliceVal
	}
	if status != nil {
		sliceVal := []string{*status}
		query["status"] = sliceVal
	}
	if team != nil {
		sliceVal := []string{*team}
		query["team"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		query["to_time"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		query["type"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/v1/cluster-branching/snapshots/%v/branches", snapshotID),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["snapshot_id"] = []string{fmt.Sprintf("%v", snapshotID)}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		prms["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		prms["limit"] = sliceVal
	}
	if requestor != nil {
		sliceVal := []string{*requestor}
		prms["requestor"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		prms["skip"] = sliceVal
	}
	if status != nil {
		sliceVal := []string{*status}
		prms["status"] = sliceVal
	}
	if team != nil {
		sliceVal := []string{*team}
		prms["team"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		prms["to_time"] = sliceVal
	}
	if type_ != nil {
		sliceVal := []string{*type_}
		prms["type"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	listSnapshotBranchesCtx, _err := app.NewListSnapshotBranchesClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.ListSnapshotBranches(listSnapshotBranchesCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.ClusterBranchCollection
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(app.ClusterBranchCollection)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ClusterBranchCollection", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ListSnapshotsClusterBranchingOK runs the method ListSnapshots of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ListSnapshotsClusterBranchingOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, clusterName *string, fromTime *int, limit int, skip *int, toTime *int) (http.ResponseWriter, app.ClusterSnapshotCollection) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if clusterName != nil {
		sliceVal := []string{*clusterName}
		query["cluster_name"] = sliceVal
	}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		query["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		query["limit"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		query["skip"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		query["to_time"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/api/v1/cluster-branching/snapshots"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if clusterName != nil {
		sliceVal := []string{*clusterName}
		prms["cluster_name"] = sliceVal
	}
	if fromTime != nil {
		sliceVal := []string{strconv.Itoa(*fromTime)}
		prms["from_time"] = sliceVal
	}
	{
		sliceVal := []string{strconv.Itoa(limit)}
		prms["limit"] = sliceVal
	}
	if skip != nil {
		sliceVal := []string{strconv.Itoa(*skip)}
		prms["skip"] = sliceVal
	}
	if toTime != nil {
		sliceVal := []string{strconv.Itoa(*toTime)}
		prms["to_time"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	listSnapshotsCtx, _err := app.NewListSnapshotsClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.ListSnapshots(listSnapshotsCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt app.ClusterSnapshotCollection
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(app.ClusterSnapshotCollection)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ClusterSnapshotCollection", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowBrancheClusterBranchingNotFound runs the method ShowBranche of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowBrancheClusterBranchingNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, branchID string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/branches/%v", branchID),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["branch_id"] = []string{fmt.Sprintf("%v", branchID)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	showBrancheCtx, _err := app.NewShowBrancheClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.ShowBranche(showBrancheCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ShowBrancheClusterBranchingOK runs the method ShowBranche of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowBrancheClusterBranchingOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, branchID string) (http.ResponseWriter, *app.ClusterForBranching) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/branches/%v", branchID),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["branch_id"] = []string{fmt.Sprintf("%v", branchID)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	showBrancheCtx, _err := app.NewShowBrancheClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.ShowBranche(showBrancheCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.ClusterForBranching
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.ClusterForBranching)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ClusterForBranching", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowClusterClusterBranchingNotFound runs the method ShowCluster of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowClusterClusterBranchingNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, clusterName string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/clusters/%v", clusterName),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["cluster_name"] = []string{fmt.Sprintf("%v", clusterName)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	showClusterCtx, _err := app.NewShowClusterClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.ShowCluster(showClusterCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ShowClusterClusterBranchingOK runs the method ShowCluster of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowClusterClusterBranchingOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, clusterName string) (http.ResponseWriter, *app.ClusterForBranching) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/clusters/%v", clusterName),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["cluster_name"] = []string{fmt.Sprintf("%v", clusterName)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	showClusterCtx, _err := app.NewShowClusterClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.ShowCluster(showClusterCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.ClusterForBranching
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.ClusterForBranching)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ClusterForBranching", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowRequestClusterBranchingNotFound runs the method ShowRequest of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowRequestClusterBranchingNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, requestID string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/requests/%v", requestID),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["request_id"] = []string{fmt.Sprintf("%v", requestID)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	showRequestCtx, _err := app.NewShowRequestClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.ShowRequest(showRequestCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ShowRequestClusterBranchingOK runs the method ShowRequest of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowRequestClusterBranchingOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, requestID string) (http.ResponseWriter, *app.BranchRequest) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/requests/%v", requestID),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["request_id"] = []string{fmt.Sprintf("%v", requestID)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	showRequestCtx, _err := app.NewShowRequestClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.ShowRequest(showRequestCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.BranchRequest
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.BranchRequest)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.BranchRequest", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowRequestTaskClusterBranchingOK runs the method ShowRequestTask of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowRequestTaskClusterBranchingOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, requestID string, taskName string) (http.ResponseWriter, *app.BranchRequestTask) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/requests/%v/tasks/%v", requestID, taskName),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["request_id"] = []string{fmt.Sprintf("%v", requestID)}
	prms["task_name"] = []string{fmt.Sprintf("%v", taskName)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	showRequestTaskCtx, _err := app.NewShowRequestTaskClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.ShowRequestTask(showRequestTaskCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.BranchRequestTask
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.BranchRequestTask)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.BranchRequestTask", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowRequestTaskLogClusterBranchingOK runs the method ShowRequestTaskLog of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowRequestTaskLogClusterBranchingOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, requestID string, taskName string) (http.ResponseWriter, *app.BranchRequestTask) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/requests/%v/tasks/%v/log", requestID, taskName),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["request_id"] = []string{fmt.Sprintf("%v", requestID)}
	prms["task_name"] = []string{fmt.Sprintf("%v", taskName)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	showRequestTaskLogCtx, _err := app.NewShowRequestTaskLogClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.ShowRequestTaskLog(showRequestTaskLogCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.BranchRequestTask
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.BranchRequestTask)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.BranchRequestTask", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// ShowSnapshotClusterBranchingNotFound runs the method ShowSnapshot of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowSnapshotClusterBranchingNotFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, snapshotID string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/snapshots/%v", snapshotID),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["snapshot_id"] = []string{fmt.Sprintf("%v", snapshotID)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	showSnapshotCtx, _err := app.NewShowSnapshotClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.ShowSnapshot(showSnapshotCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 404 {
		t.Errorf("invalid response status code: got %+v, expected 404", rw.Code)
	}

	// Return results
	return rw
}

// ShowSnapshotClusterBranchingOK runs the method ShowSnapshot of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func ShowSnapshotClusterBranchingOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, snapshotID string) (http.ResponseWriter, *app.ClusterForBranching) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/snapshots/%v", snapshotID),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["snapshot_id"] = []string{fmt.Sprintf("%v", snapshotID)}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	showSnapshotCtx, _err := app.NewShowSnapshotClusterBranchingContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.ShowSnapshot(showSnapshotCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.ClusterForBranching
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.ClusterForBranching)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.ClusterForBranching", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// UpdateBranchClusterBranchingAccepted runs the method UpdateBranch of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func UpdateBranchClusterBranchingAccepted(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, payload *app.UpdateBranchPayload) (http.ResponseWriter, *app.BranchRequest) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil, nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/branches"),
	}
	req, _err := http.NewRequest("PUT", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	updateBranchCtx, __err := app.NewUpdateBranchClusterBranchingContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil, nil
	}
	updateBranchCtx.Payload = payload

	// Perform action
	__err = ctrl.UpdateBranch(updateBranchCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 202 {
		t.Errorf("invalid response status code: got %+v, expected 202", rw.Code)
	}
	var mt *app.BranchRequest
	if resp != nil {
		var __ok bool
		mt, __ok = resp.(*app.BranchRequest)
		if !__ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.BranchRequest", resp, resp)
		}
		__err = mt.Validate()
		if __err != nil {
			t.Errorf("invalid response media type: %s", __err)
		}
	}

	// Return results
	return rw, mt
}

// UpdateBranchClusterBranchingBadRequest runs the method UpdateBranch of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func UpdateBranchClusterBranchingBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, payload *app.UpdateBranchPayload) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/branches"),
	}
	req, _err := http.NewRequest("PUT", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	updateBranchCtx, __err := app.NewUpdateBranchClusterBranchingContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil
	}
	updateBranchCtx.Payload = payload

	// Perform action
	__err = ctrl.UpdateBranch(updateBranchCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}

	// Return results
	return rw
}

// UpdateBranchClusterBranchingUnprocessableEntity runs the method UpdateBranch of the given controller with the given parameters and payload.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func UpdateBranchClusterBranchingUnprocessableEntity(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.ClusterBranchingController, payload *app.UpdateBranchPayload) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Validate payload
	err := payload.Validate()
	if err != nil {
		e, ok := err.(goa.ServiceError)
		if !ok {
			panic(err) // bug
		}
		t.Errorf("unexpected payload validation error: %+v", e)
		return nil
	}

	// Setup request context
	rw := httptest.NewRecorder()
	u := &url.URL{
		Path: fmt.Sprintf("/api/v1/cluster-branching/branches"),
	}
	req, _err := http.NewRequest("PUT", u.String(), nil)
	if _err != nil {
		panic("invalid test " + _err.Error()) // bug
	}
	prms := url.Values{}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "ClusterBranchingTest"), rw, req, prms)
	updateBranchCtx, __err := app.NewUpdateBranchClusterBranchingContext(goaCtx, req, service)
	if __err != nil {
		_e, _ok := __err.(goa.ServiceError)
		if !_ok {
			panic("invalid test data " + __err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", _e)
		return nil
	}
	updateBranchCtx.Payload = payload

	// Perform action
	__err = ctrl.UpdateBranch(updateBranchCtx)

	// Validate response
	if __err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", __err, logBuf.String())
	}
	if rw.Code != 422 {
		t.Errorf("invalid response status code: got %+v, expected 422", rw.Code)
	}

	// Return results
	return rw
}
