// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "yawarad": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/itamartempel/yawarad/design
// --out=$(GOPATH)/src/github.com/itamartempel/yawarad
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// ClusterBranchingController is the controller interface for the ClusterBranching actions.
type ClusterBranchingController interface {
	goa.Muxer
	CreateBranch(*CreateBranchClusterBranchingContext) error
	ListBranches(*ListBranchesClusterBranchingContext) error
	ListClusterBranches(*ListClusterBranchesClusterBranchingContext) error
	ListClusterSnapshots(*ListClusterSnapshotsClusterBranchingContext) error
	ListClusters(*ListClustersClusterBranchingContext) error
	ListRequestTasks(*ListRequestTasksClusterBranchingContext) error
	ListRequests(*ListRequestsClusterBranchingContext) error
	ListSnapshotBranches(*ListSnapshotBranchesClusterBranchingContext) error
	ListSnapshots(*ListSnapshotsClusterBranchingContext) error
	ShowBranche(*ShowBrancheClusterBranchingContext) error
	ShowCluster(*ShowClusterClusterBranchingContext) error
	ShowRequest(*ShowRequestClusterBranchingContext) error
	ShowRequestTask(*ShowRequestTaskClusterBranchingContext) error
	ShowRequestTaskLog(*ShowRequestTaskLogClusterBranchingContext) error
	ShowSnapshot(*ShowSnapshotClusterBranchingContext) error
	SubscribeRequestChanges(*SubscribeRequestChangesClusterBranchingContext) error
	SubscribeRequestTaskLogStream(*SubscribeRequestTaskLogStreamClusterBranchingContext) error
	UpdateBranch(*UpdateBranchClusterBranchingContext) error
}

// MountClusterBranchingController "mounts" a ClusterBranching resource controller on the given service.
func MountClusterBranchingController(service *goa.Service, ctrl ClusterBranchingController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateBranchClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateBranchPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.CreateBranch(rctx)
	}
	service.Mux.Handle("POST", "/api/v1/cluster-branching/branches", ctrl.MuxHandler("create-branch", h, unmarshalCreateBranchClusterBranchingPayload))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "CreateBranch", "route", "POST /api/v1/cluster-branching/branches")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListBranchesClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListBranches(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/branches", ctrl.MuxHandler("list-branches", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "ListBranches", "route", "GET /api/v1/cluster-branching/branches")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListClusterBranchesClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListClusterBranches(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/clusters/:cluster_name/branches", ctrl.MuxHandler("list-cluster-branches", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "ListClusterBranches", "route", "GET /api/v1/cluster-branching/clusters/:cluster_name/branches")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListClusterSnapshotsClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListClusterSnapshots(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/clusters/:cluster_name/snapshots", ctrl.MuxHandler("list-cluster-snapshots", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "ListClusterSnapshots", "route", "GET /api/v1/cluster-branching/clusters/:cluster_name/snapshots")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListClustersClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListClusters(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/clusters", ctrl.MuxHandler("list-clusters", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "ListClusters", "route", "GET /api/v1/cluster-branching/clusters")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListRequestTasksClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListRequestTasks(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/requests/:request_id/tasks", ctrl.MuxHandler("list-request-tasks", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "ListRequestTasks", "route", "GET /api/v1/cluster-branching/requests/:request_id/tasks")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListRequestsClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListRequests(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/requests", ctrl.MuxHandler("list-requests", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "ListRequests", "route", "GET /api/v1/cluster-branching/requests")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSnapshotBranchesClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSnapshotBranches(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/snapshots/:snapshot_id/branches", ctrl.MuxHandler("list-snapshot-branches", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "ListSnapshotBranches", "route", "GET /api/v1/cluster-branching/snapshots/:snapshot_id/branches")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListSnapshotsClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ListSnapshots(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/snapshots", ctrl.MuxHandler("list-snapshots", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "ListSnapshots", "route", "GET /api/v1/cluster-branching/snapshots")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowBrancheClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowBranche(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/branches/:branch_id", ctrl.MuxHandler("show-branche", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "ShowBranche", "route", "GET /api/v1/cluster-branching/branches/:branch_id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowClusterClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowCluster(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/clusters/:cluster_name", ctrl.MuxHandler("show-cluster", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "ShowCluster", "route", "GET /api/v1/cluster-branching/clusters/:cluster_name")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowRequestClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowRequest(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/requests/:request_id", ctrl.MuxHandler("show-request", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "ShowRequest", "route", "GET /api/v1/cluster-branching/requests/:request_id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowRequestTaskClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowRequestTask(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/requests/:request_id/tasks/:task_name", ctrl.MuxHandler("show-request-task", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "ShowRequestTask", "route", "GET /api/v1/cluster-branching/requests/:request_id/tasks/:task_name")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowRequestTaskLogClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowRequestTaskLog(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/requests/:request_id/tasks/:task_name/log", ctrl.MuxHandler("show-request-task-log", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "ShowRequestTaskLog", "route", "GET /api/v1/cluster-branching/requests/:request_id/tasks/:task_name/log")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowSnapshotClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowSnapshot(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/snapshots/:snapshot_id", ctrl.MuxHandler("show-snapshot", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "ShowSnapshot", "route", "GET /api/v1/cluster-branching/snapshots/:snapshot_id")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSubscribeRequestChangesClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.SubscribeRequestChanges(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/requests/:request_id/ws", ctrl.MuxHandler("subscribe-request-changes", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "SubscribeRequestChanges", "route", "GET /api/v1/cluster-branching/requests/:request_id/ws")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSubscribeRequestTaskLogStreamClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.SubscribeRequestTaskLogStream(rctx)
	}
	service.Mux.Handle("GET", "/api/v1/cluster-branching/requests/:request_id/tasks/:task_name/log/ws", ctrl.MuxHandler("subscribe-request-task-log-stream", h, nil))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "SubscribeRequestTaskLogStream", "route", "GET /api/v1/cluster-branching/requests/:request_id/tasks/:task_name/log/ws")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateBranchClusterBranchingContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateBranchPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.UpdateBranch(rctx)
	}
	service.Mux.Handle("PUT", "/api/v1/cluster-branching/branches", ctrl.MuxHandler("update-branch", h, unmarshalUpdateBranchClusterBranchingPayload))
	service.LogInfo("mount", "ctrl", "ClusterBranching", "action", "UpdateBranch", "route", "PUT /api/v1/cluster-branching/branches")
}

// unmarshalCreateBranchClusterBranchingPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateBranchClusterBranchingPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createBranchPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateBranchClusterBranchingPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateBranchClusterBranchingPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateBranchPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
