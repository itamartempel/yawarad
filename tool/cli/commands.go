// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "yawarad": CLI Commands
//
// Command:
// $ goagen
// --design=github.com/itamartempel/yawarad/design
// --out=$(GOPATH)/src/github.com/itamartempel/yawarad
// --version=v1.3.1

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/itamartempel/yawarad/client"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// CreateBrancheCommand is the command line data structure for the create action of branche
	CreateBrancheCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ListBrancheCommand is the command line data structure for the list action of branche
	ListBrancheCommand struct {
		// Filter branch by cluster name (contains)
		ClusterName string
		// Filter cluster branch by retriving all branch that was created after the giving value (Epoch time in milliseconds)
		FromTime int
		// limit the result set by giving value (default is 100 )
		Limit int
		// Filter branches by username of the reuqstor(contains)
		Requestor string
		// For pagenation, skip results by giving value
		Skip int
		// Filter branches by branch status
		Status string
		// Filter branches by team name (contains)
		Team string
		// Filter cluster branch by retriving all branch that was created before the giving value (Epoch time in milliseconds)
		ToTime int
		// Filter branches by branch type
		Type        string
		PrettyPrint bool
	}

	// ShowBrancheCommand is the command line data structure for the show action of branche
	ShowBrancheCommand struct {
		// The branch id to show
		BranchID    string
		PrettyPrint bool
	}

	// UpdateBrancheCommand is the command line data structure for the update action of branche
	UpdateBrancheCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// ListClusterCommand is the command line data structure for the list action of cluster
	ListClusterCommand struct {
		// Filter by cluster name (contains)
		ClusterName string
		ClusterType string
		// limit the result set by giving value (default is 100)
		Limit int
		// For pagenation, skip results by giving value
		Skip        int
		PrettyPrint bool
	}

	// ShowClusterCommand is the command line data structure for the show action of cluster
	ShowClusterCommand struct {
		// The cluster name to show
		ClusterName string
		PrettyPrint bool
	}

	// ListClusterBranchesCommand is the command line data structure for the list action of cluster-branches
	ListClusterBranchesCommand struct {
		// The cluster name to show
		ClusterName string
		// Filter cluster branch by retriving all branch that was created after the giving value (Epoch time in milliseconds)
		FromTime int
		// limit the result set by giving value (default is 100 )
		Limit int
		// Filter branches by username of the reuqstor(contains)
		Requestor string
		// For pagenation, skip results by giving value
		Skip int
		// Filter branches by branch status
		Status string
		// Filter branches by team name (contains)
		Team string
		// Filter cluster branch by retriving all branch that was created before the giving value (Epoch time in milliseconds)
		ToTime int
		// Filter branches by branch type
		Type        string
		PrettyPrint bool
	}

	// ListClusterSnapshotsCommand is the command line data structure for the list action of cluster-snapshots
	ListClusterSnapshotsCommand struct {
		// The cluster name to show
		ClusterName string
		// Filter cluster snapshot by retriving all snapshot that was created after the giving value (Epoch time in milliseconds)
		FromTime int
		// limit the result set by giving value (default is 100)
		Limit int
		// For pagenation, skip results by giving value
		Skip int
		// Filter cluster snapshot by retriving all snapshot that was created before the giving value (Epoch time in milliseconds)
		ToTime      int
		PrettyPrint bool
	}

	// ListRequestCommand is the command line data structure for the list action of request
	ListRequestCommand struct {
		// Filter request by cluster name (contains)
		ClusterName string
		// Filter requests that was created after the giving value (Epoch time in milliseconds)
		FromTime int
		// limit the result set by giving value (default is 100 )
		Limit int
		// Filter branches by username of the reuqstor(contains)
		Requestor string
		// For pagenation, skip results by giving value
		Skip int
		// Filter requests by request state
		State string
		// Filter request that was created before the giving value (Epoch time in milliseconds)
		ToTime int
		// Filter request by request type
		Type        string
		PrettyPrint bool
	}

	// ShowRequestCommand is the command line data structure for the show action of request
	ShowRequestCommand struct {
		// The request id to show
		RequestID   string
		PrettyPrint bool
	}

	// SubscribeRequestChangesCommand is the command line data structure for the subscribe action of request-changes
	SubscribeRequestChangesCommand struct {
		// The request id to show
		RequestID   string
		PrettyPrint bool
	}

	// ListRequestTaskCommand is the command line data structure for the list action of request-task
	ListRequestTaskCommand struct {
		// The request id to show
		RequestID   string
		PrettyPrint bool
	}

	// LogRequestTaskCommand is the command line data structure for the log action of request-task
	LogRequestTaskCommand struct {
		// The request id to show
		RequestID string
		// The request task name to show
		TaskName    string
		PrettyPrint bool
	}

	// ShowRequestTaskCommand is the command line data structure for the show action of request-task
	ShowRequestTaskCommand struct {
		// The request id to show
		RequestID string
		// The request task name to show
		TaskName    string
		PrettyPrint bool
	}

	// StreamLogRequestTaskCommand is the command line data structure for the stream-log action of request-task
	StreamLogRequestTaskCommand struct {
		// The request id to show
		RequestID string
		// The request task name to show
		TaskName    string
		PrettyPrint bool
	}

	// ListSnapshotCommand is the command line data structure for the list action of snapshot
	ListSnapshotCommand struct {
		// Filter by cluster name (contains)
		ClusterName string
		// Filter cluster snapshot by retriving all snapshot that was created after the giving value (Epoch time in milliseconds)
		FromTime int
		// limit the result set by giving value (default is 100)
		Limit int
		// For pagenation, skip results by giving value
		Skip int
		// Filter cluster snapshot by retriving all snapshot that was created before the giving value (Epoch time in milliseconds)
		ToTime      int
		PrettyPrint bool
	}

	// ShowSnapshotCommand is the command line data structure for the show action of snapshot
	ShowSnapshotCommand struct {
		// The snapshot id to show
		SnapshotID  string
		PrettyPrint bool
	}

	// ListSnapshotBranchesCommand is the command line data structure for the list action of snapshot-branches
	ListSnapshotBranchesCommand struct {
		// The snapshot id to show
		SnapshotID string
		// Filter cluster branch by retriving all branch that was created after the giving value (Epoch time in milliseconds)
		FromTime int
		// limit the result set by giving value (default is 100 )
		Limit int
		// Filter branches by username of the reuqstor(contains)
		Requestor string
		// For pagenation, skip results by giving value
		Skip int
		// Filter branches by branch status
		Status string
		// Filter branches by team name (contains)
		Team string
		// Filter cluster branch by retriving all branch that was created before the giving value (Epoch time in milliseconds)
		ToTime int
		// Filter branches by branch type
		Type        string
		PrettyPrint bool
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "create",
		Short: `Create a new branch`,
	}
	tmp1 := new(CreateBrancheCommand)
	sub = &cobra.Command{
		Use:   `branche ["/api/v1/cluster-branching/branches/"]`,
		Short: ``,
		Long: `

Payload example:

{
   "cluster_name": "my_cluster",
   "requestor": "iisraelly@wix.com",
   "snapshot_id": "Image_4946347",
   "team": "Booking",
   "type": "dr"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "list",
		Short: `list action`,
	}
	tmp2 := new(ListBrancheCommand)
	sub = &cobra.Command{
		Use:   `branche ["/api/v1/cluster-branching/branches/"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp3 := new(ListClusterCommand)
	sub = &cobra.Command{
		Use:   `cluster ["/api/v1/cluster-branching/clusters/"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp4 := new(ListClusterBranchesCommand)
	sub = &cobra.Command{
		Use:   `cluster-branches ["/api/v1/cluster-branching/clusters/CLUSTER_NAME/branches"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp5 := new(ListClusterSnapshotsCommand)
	sub = &cobra.Command{
		Use:   `cluster-snapshots ["/api/v1/cluster-branching/clusters/CLUSTER_NAME/snapshots"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp6 := new(ListRequestCommand)
	sub = &cobra.Command{
		Use:   `request ["/api/v1/cluster-branching/requests/"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp7 := new(ListRequestTaskCommand)
	sub = &cobra.Command{
		Use:   `request-task ["/api/v1/cluster-branching/requests/REQUEST_ID/tasks"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp7.Run(c, args) },
	}
	tmp7.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp7.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp8 := new(ListSnapshotCommand)
	sub = &cobra.Command{
		Use:   `snapshot ["/api/v1/cluster-branching/snapshots/"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp8.Run(c, args) },
	}
	tmp8.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp8.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp9 := new(ListSnapshotBranchesCommand)
	sub = &cobra.Command{
		Use:   `snapshot-branches ["/api/v1/cluster-branching/snapshots/SNAPSHOT_ID/branches"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp9.Run(c, args) },
	}
	tmp9.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp9.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "log",
		Short: `Retrive a single request task by id`,
	}
	tmp10 := new(LogRequestTaskCommand)
	sub = &cobra.Command{
		Use:   `request-task ["/api/v1/cluster-branching/requests/REQUEST_ID/tasks/TASK_NAME/log"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp10.Run(c, args) },
	}
	tmp10.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp10.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show",
		Short: `show action`,
	}
	tmp11 := new(ShowBrancheCommand)
	sub = &cobra.Command{
		Use:   `branche ["/api/v1/cluster-branching/branches/BRANCH_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp11.Run(c, args) },
	}
	tmp11.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp11.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp12 := new(ShowClusterCommand)
	sub = &cobra.Command{
		Use:   `cluster ["/api/v1/cluster-branching/clusters/CLUSTER_NAME"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp12.Run(c, args) },
	}
	tmp12.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp12.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp13 := new(ShowRequestCommand)
	sub = &cobra.Command{
		Use:   `request ["/api/v1/cluster-branching/requests/REQUEST_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp13.Run(c, args) },
	}
	tmp13.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp13.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp14 := new(ShowRequestTaskCommand)
	sub = &cobra.Command{
		Use:   `request-task ["/api/v1/cluster-branching/requests/REQUEST_ID/tasks/TASK_NAME"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp14.Run(c, args) },
	}
	tmp14.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp14.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp15 := new(ShowSnapshotCommand)
	sub = &cobra.Command{
		Use:   `snapshot ["/api/v1/cluster-branching/snapshots/SNAPSHOT_ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp15.Run(c, args) },
	}
	tmp15.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp15.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "stream-log",
		Short: `Stream the task log`,
	}
	tmp16 := new(StreamLogRequestTaskCommand)
	sub = &cobra.Command{
		Use:   `request-task ["/api/v1/cluster-branching/requests/REQUEST_ID/tasks/TASK_NAME/log/ws"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp16.Run(c, args) },
	}
	tmp16.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp16.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "subscribe",
		Short: `Subscribe to any changes that will happend to a single request by websocket`,
	}
	tmp17 := new(SubscribeRequestChangesCommand)
	sub = &cobra.Command{
		Use:   `request-changes ["/api/v1/cluster-branching/requests/REQUEST_ID/ws"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp17.Run(c, args) },
	}
	tmp17.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp17.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update",
		Short: `Update a new branch`,
	}
	tmp18 := new(UpdateBrancheCommand)
	sub = &cobra.Command{
		Use:   `branche ["/api/v1/cluster-branching/branches/"]`,
		Short: ``,
		Long: `

Payload example:

{
   "comment": "Quia necessitatibus.",
   "operation": "expire_now"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp18.Run(c, args) },
	}
	tmp18.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp18.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run makes the HTTP request corresponding to the CreateBrancheCommand command.
func (cmd *CreateBrancheCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/cluster-branching/branches/"
	}
	var payload client.CreateBranchPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateBranche(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateBrancheCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ListBrancheCommand command.
func (cmd *ListBrancheCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/cluster-branching/branches/"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListBranche(ctx, path, stringFlagVal("cluster_name", cmd.ClusterName), intFlagVal("from_time", cmd.FromTime), intFlagVal("limit", cmd.Limit), stringFlagVal("requestor", cmd.Requestor), intFlagVal("skip", cmd.Skip), stringFlagVal("status", cmd.Status), stringFlagVal("team", cmd.Team), intFlagVal("to_time", cmd.ToTime), stringFlagVal("type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListBrancheCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var clusterName string
	cc.Flags().StringVar(&cmd.ClusterName, "cluster_name", clusterName, `Filter branch by cluster name (contains)`)
	var fromTime int
	cc.Flags().IntVar(&cmd.FromTime, "from_time", fromTime, `Filter cluster branch by retriving all branch that was created after the giving value (Epoch time in milliseconds)`)
	cc.Flags().IntVar(&cmd.Limit, "limit", 100, `limit the result set by giving value (default is 100 )`)
	var requestor string
	cc.Flags().StringVar(&cmd.Requestor, "requestor", requestor, `Filter branches by username of the reuqstor(contains)`)
	var skip int
	cc.Flags().IntVar(&cmd.Skip, "skip", skip, `For pagenation, skip results by giving value`)
	var status string
	cc.Flags().StringVar(&cmd.Status, "status", status, `Filter branches by branch status`)
	var team string
	cc.Flags().StringVar(&cmd.Team, "team", team, `Filter branches by team name (contains)`)
	var toTime int
	cc.Flags().IntVar(&cmd.ToTime, "to_time", toTime, `Filter cluster branch by retriving all branch that was created before the giving value (Epoch time in milliseconds)`)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "type", type_, `Filter branches by branch type`)
}

// Run makes the HTTP request corresponding to the ShowBrancheCommand command.
func (cmd *ShowBrancheCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/cluster-branching/branches/%v", url.QueryEscape(cmd.BranchID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowBranche(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowBrancheCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var branchID string
	cc.Flags().StringVar(&cmd.BranchID, "branch_id", branchID, `The branch id to show`)
}

// Run makes the HTTP request corresponding to the UpdateBrancheCommand command.
func (cmd *UpdateBrancheCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/cluster-branching/branches/"
	}
	var payload client.UpdateBranchPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateBranche(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateBrancheCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the ListClusterCommand command.
func (cmd *ListClusterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/cluster-branching/clusters/"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListCluster(ctx, path, stringFlagVal("cluster_name", cmd.ClusterName), stringFlagVal("cluster_type", cmd.ClusterType), intFlagVal("limit", cmd.Limit), intFlagVal("skip", cmd.Skip))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListClusterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var clusterName string
	cc.Flags().StringVar(&cmd.ClusterName, "cluster_name", clusterName, `Filter by cluster name (contains)`)
	var clusterType string
	cc.Flags().StringVar(&cmd.ClusterType, "cluster_type", clusterType, ``)
	cc.Flags().IntVar(&cmd.Limit, "limit", 100, `limit the result set by giving value (default is 100)`)
	var skip int
	cc.Flags().IntVar(&cmd.Skip, "skip", skip, `For pagenation, skip results by giving value`)
}

// Run makes the HTTP request corresponding to the ShowClusterCommand command.
func (cmd *ShowClusterCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/cluster-branching/clusters/%v", url.QueryEscape(cmd.ClusterName))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowCluster(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowClusterCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var clusterName string
	cc.Flags().StringVar(&cmd.ClusterName, "cluster_name", clusterName, `The cluster name to show`)
}

// Run makes the HTTP request corresponding to the ListClusterBranchesCommand command.
func (cmd *ListClusterBranchesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/cluster-branching/clusters/%v/branches", url.QueryEscape(cmd.ClusterName))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListClusterBranches(ctx, path, intFlagVal("from_time", cmd.FromTime), intFlagVal("limit", cmd.Limit), stringFlagVal("requestor", cmd.Requestor), intFlagVal("skip", cmd.Skip), stringFlagVal("status", cmd.Status), stringFlagVal("team", cmd.Team), intFlagVal("to_time", cmd.ToTime), stringFlagVal("type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListClusterBranchesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var clusterName string
	cc.Flags().StringVar(&cmd.ClusterName, "cluster_name", clusterName, `The cluster name to show`)
	var fromTime int
	cc.Flags().IntVar(&cmd.FromTime, "from_time", fromTime, `Filter cluster branch by retriving all branch that was created after the giving value (Epoch time in milliseconds)`)
	cc.Flags().IntVar(&cmd.Limit, "limit", 100, `limit the result set by giving value (default is 100 )`)
	var requestor string
	cc.Flags().StringVar(&cmd.Requestor, "requestor", requestor, `Filter branches by username of the reuqstor(contains)`)
	var skip int
	cc.Flags().IntVar(&cmd.Skip, "skip", skip, `For pagenation, skip results by giving value`)
	var status string
	cc.Flags().StringVar(&cmd.Status, "status", status, `Filter branches by branch status`)
	var team string
	cc.Flags().StringVar(&cmd.Team, "team", team, `Filter branches by team name (contains)`)
	var toTime int
	cc.Flags().IntVar(&cmd.ToTime, "to_time", toTime, `Filter cluster branch by retriving all branch that was created before the giving value (Epoch time in milliseconds)`)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "type", type_, `Filter branches by branch type`)
}

// Run makes the HTTP request corresponding to the ListClusterSnapshotsCommand command.
func (cmd *ListClusterSnapshotsCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/cluster-branching/clusters/%v/snapshots", url.QueryEscape(cmd.ClusterName))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListClusterSnapshots(ctx, path, intFlagVal("from_time", cmd.FromTime), intFlagVal("limit", cmd.Limit), intFlagVal("skip", cmd.Skip), intFlagVal("to_time", cmd.ToTime))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListClusterSnapshotsCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var clusterName string
	cc.Flags().StringVar(&cmd.ClusterName, "cluster_name", clusterName, `The cluster name to show`)
	var fromTime int
	cc.Flags().IntVar(&cmd.FromTime, "from_time", fromTime, `Filter cluster snapshot by retriving all snapshot that was created after the giving value (Epoch time in milliseconds)`)
	cc.Flags().IntVar(&cmd.Limit, "limit", 100, `limit the result set by giving value (default is 100)`)
	var skip int
	cc.Flags().IntVar(&cmd.Skip, "skip", skip, `For pagenation, skip results by giving value`)
	var toTime int
	cc.Flags().IntVar(&cmd.ToTime, "to_time", toTime, `Filter cluster snapshot by retriving all snapshot that was created before the giving value (Epoch time in milliseconds)`)
}

// Run makes the HTTP request corresponding to the ListRequestCommand command.
func (cmd *ListRequestCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/cluster-branching/requests/"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListRequest(ctx, path, stringFlagVal("cluster_name", cmd.ClusterName), intFlagVal("from_time", cmd.FromTime), intFlagVal("limit", cmd.Limit), stringFlagVal("requestor", cmd.Requestor), intFlagVal("skip", cmd.Skip), stringFlagVal("state", cmd.State), intFlagVal("to_time", cmd.ToTime), stringFlagVal("type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListRequestCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var clusterName string
	cc.Flags().StringVar(&cmd.ClusterName, "cluster_name", clusterName, `Filter request by cluster name (contains)`)
	var fromTime int
	cc.Flags().IntVar(&cmd.FromTime, "from_time", fromTime, `Filter requests that was created after the giving value (Epoch time in milliseconds)`)
	cc.Flags().IntVar(&cmd.Limit, "limit", 100, `limit the result set by giving value (default is 100 )`)
	var requestor string
	cc.Flags().StringVar(&cmd.Requestor, "requestor", requestor, `Filter branches by username of the reuqstor(contains)`)
	var skip int
	cc.Flags().IntVar(&cmd.Skip, "skip", skip, `For pagenation, skip results by giving value`)
	var state string
	cc.Flags().StringVar(&cmd.State, "state", state, `Filter requests by request state`)
	var toTime int
	cc.Flags().IntVar(&cmd.ToTime, "to_time", toTime, `Filter request that was created before the giving value (Epoch time in milliseconds)`)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "type", type_, `Filter request by request type`)
}

// Run makes the HTTP request corresponding to the ShowRequestCommand command.
func (cmd *ShowRequestCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/cluster-branching/requests/%v", url.QueryEscape(cmd.RequestID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowRequest(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowRequestCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var requestID string
	cc.Flags().StringVar(&cmd.RequestID, "request_id", requestID, `The request id to show`)
}

// Run establishes a websocket connection for the SubscribeRequestChangesCommand command.
func (cmd *SubscribeRequestChangesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/cluster-branching/requests/%v/ws", url.QueryEscape(cmd.RequestID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	ws, err := c.SubscribeRequestChanges(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}
	go goaclient.WSWrite(ws)
	goaclient.WSRead(ws)

	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *SubscribeRequestChangesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var requestID string
	cc.Flags().StringVar(&cmd.RequestID, "request_id", requestID, `The request id to show`)
}

// Run makes the HTTP request corresponding to the ListRequestTaskCommand command.
func (cmd *ListRequestTaskCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/cluster-branching/requests/%v/tasks", url.QueryEscape(cmd.RequestID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListRequestTask(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListRequestTaskCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var requestID string
	cc.Flags().StringVar(&cmd.RequestID, "request_id", requestID, `The request id to show`)
}

// Run makes the HTTP request corresponding to the LogRequestTaskCommand command.
func (cmd *LogRequestTaskCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/cluster-branching/requests/%v/tasks/%v/log", url.QueryEscape(cmd.RequestID), url.QueryEscape(cmd.TaskName))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.LogRequestTask(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LogRequestTaskCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var requestID string
	cc.Flags().StringVar(&cmd.RequestID, "request_id", requestID, `The request id to show`)
	var taskName string
	cc.Flags().StringVar(&cmd.TaskName, "task_name", taskName, `The request task name to show`)
}

// Run makes the HTTP request corresponding to the ShowRequestTaskCommand command.
func (cmd *ShowRequestTaskCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/cluster-branching/requests/%v/tasks/%v", url.QueryEscape(cmd.RequestID), url.QueryEscape(cmd.TaskName))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowRequestTask(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowRequestTaskCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var requestID string
	cc.Flags().StringVar(&cmd.RequestID, "request_id", requestID, `The request id to show`)
	var taskName string
	cc.Flags().StringVar(&cmd.TaskName, "task_name", taskName, `The request task name to show`)
}

// Run establishes a websocket connection for the StreamLogRequestTaskCommand command.
func (cmd *StreamLogRequestTaskCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/cluster-branching/requests/%v/tasks/%v/log/ws", url.QueryEscape(cmd.RequestID), url.QueryEscape(cmd.TaskName))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	ws, err := c.StreamLogRequestTask(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}
	go goaclient.WSWrite(ws)
	goaclient.WSRead(ws)

	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *StreamLogRequestTaskCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var requestID string
	cc.Flags().StringVar(&cmd.RequestID, "request_id", requestID, `The request id to show`)
	var taskName string
	cc.Flags().StringVar(&cmd.TaskName, "task_name", taskName, `The request task name to show`)
}

// Run makes the HTTP request corresponding to the ListSnapshotCommand command.
func (cmd *ListSnapshotCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/v1/cluster-branching/snapshots/"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSnapshot(ctx, path, stringFlagVal("cluster_name", cmd.ClusterName), intFlagVal("from_time", cmd.FromTime), intFlagVal("limit", cmd.Limit), intFlagVal("skip", cmd.Skip), intFlagVal("to_time", cmd.ToTime))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSnapshotCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var clusterName string
	cc.Flags().StringVar(&cmd.ClusterName, "cluster_name", clusterName, `Filter by cluster name (contains)`)
	var fromTime int
	cc.Flags().IntVar(&cmd.FromTime, "from_time", fromTime, `Filter cluster snapshot by retriving all snapshot that was created after the giving value (Epoch time in milliseconds)`)
	cc.Flags().IntVar(&cmd.Limit, "limit", 100, `limit the result set by giving value (default is 100)`)
	var skip int
	cc.Flags().IntVar(&cmd.Skip, "skip", skip, `For pagenation, skip results by giving value`)
	var toTime int
	cc.Flags().IntVar(&cmd.ToTime, "to_time", toTime, `Filter cluster snapshot by retriving all snapshot that was created before the giving value (Epoch time in milliseconds)`)
}

// Run makes the HTTP request corresponding to the ShowSnapshotCommand command.
func (cmd *ShowSnapshotCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/cluster-branching/snapshots/%v", url.QueryEscape(cmd.SnapshotID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowSnapshot(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowSnapshotCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var snapshotID string
	cc.Flags().StringVar(&cmd.SnapshotID, "snapshot_id", snapshotID, `The snapshot id to show`)
}

// Run makes the HTTP request corresponding to the ListSnapshotBranchesCommand command.
func (cmd *ListSnapshotBranchesCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/v1/cluster-branching/snapshots/%v/branches", url.QueryEscape(cmd.SnapshotID))
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ListSnapshotBranches(ctx, path, intFlagVal("from_time", cmd.FromTime), intFlagVal("limit", cmd.Limit), stringFlagVal("requestor", cmd.Requestor), intFlagVal("skip", cmd.Skip), stringFlagVal("status", cmd.Status), stringFlagVal("team", cmd.Team), intFlagVal("to_time", cmd.ToTime), stringFlagVal("type", cmd.Type))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ListSnapshotBranchesCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var snapshotID string
	cc.Flags().StringVar(&cmd.SnapshotID, "snapshot_id", snapshotID, `The snapshot id to show`)
	var fromTime int
	cc.Flags().IntVar(&cmd.FromTime, "from_time", fromTime, `Filter cluster branch by retriving all branch that was created after the giving value (Epoch time in milliseconds)`)
	cc.Flags().IntVar(&cmd.Limit, "limit", 100, `limit the result set by giving value (default is 100 )`)
	var requestor string
	cc.Flags().StringVar(&cmd.Requestor, "requestor", requestor, `Filter branches by username of the reuqstor(contains)`)
	var skip int
	cc.Flags().IntVar(&cmd.Skip, "skip", skip, `For pagenation, skip results by giving value`)
	var status string
	cc.Flags().StringVar(&cmd.Status, "status", status, `Filter branches by branch status`)
	var team string
	cc.Flags().StringVar(&cmd.Team, "team", team, `Filter branches by team name (contains)`)
	var toTime int
	cc.Flags().IntVar(&cmd.ToTime, "to_time", toTime, `Filter cluster branch by retriving all branch that was created before the giving value (Epoch time in milliseconds)`)
	var type_ string
	cc.Flags().StringVar(&cmd.Type, "type", type_, `Filter branches by branch type`)
}
